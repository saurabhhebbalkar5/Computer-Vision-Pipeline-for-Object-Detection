import tensorflow as tf
from keras.preprocessing import image
import numpy as np
import cv2
from multiprocessing import Queue

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

# Class to detect Car Type (Sedan/Hatchback) 
class Classify_CarModel():

	prediction = None
	def __init__(self):
		# Load the model pretained on MobileNet
		# This model is generated by running Object_classifier.py
		self.model = tf.keras.models.load_model('CarType_Classifer_Mobilenet_TF115.h5')

	
	def predict_image(self, img):
		# convert image to an array of height, width and channels
		img_tensor = image.img_to_array(img)  
		# Add fourth dimension to satisfy the model input criteria                 
		img_tensor = np.expand_dims(img_tensor, axis=0) 
		# Normalize the image to gray scale
		img_tensor /= 255. 
	
		# predict the image (region of interest)
		pred = self.model.predict(img_tensor)
		# get the max probability as the class
		y_classes = pred.argmax(axis=-1)
		# return hatchback and sedan
		if(y_classes == 0):
			return 'Hatchback'
		else:
			return 'Sedan'